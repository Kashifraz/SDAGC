const { MessageEmbed } = require('discord.js');

// Code generated by GithubCopilot using the query:
// Get information on a user or myself in a guild
// Then fixed by the user to avoid errors and exception

module.exports = {
	name: "userinfo",
	category: "utility",
	usage: "/userinfo <user?>",
	description: "Get information on a user or yourself",
	options: [
		{
			name: 'user',
			type: 6, // "USER"
			description: 'User you want to get information about. If omitted, will return your information',
			required: false,
		},
	],
	permissions: [],
	ownerOnly: false,
	run: async (client, interaction, options) => {
		const target = interaction.options.getUser("user") || interaction.user;
		const member = interaction.guild.members.cache.get(target.id);
		const status = {
			offline: "Offline",
			online: "Online",
			idle: "Idle",
			dnd: "Do Not Disturb",
		};

		// Filtering out @everyone role and getting the roles of roles for the member
		const roles = member.roles.cache.map(roles => { if (roles.name != "@everyone") return `<@&${roles.id}>` }).join(' ');

		const embed = new MessageEmbed()
			.setColor(client.config.embedColor || member.displayHexColor || 'RANDOM')
			.setThumbnail(target.displayAvatarURL({ dynamic: true }))
			.setAuthor({ name: `${target.tag} (${target.id})`, iconURL: target.displayAvatarURL({ dynamic: true })})
			.addField('**User Information**', [
				`\n**❯ Username:** ${target.username}`,
				`\n**❯ Discriminator:** ${target.discriminator}`,
				`\n**❯ ID:** ${target.id}`,
				`\n**❯ Avatar:** [Link to avatar](${target.displayAvatarURL({ dynamic: true })})`,
				`\n**❯ Time Created:** ${new Date(target.createdTimestamp).toLocaleString()}`,
				`\n**❯ Status:** ${status[target.presence?.status] ? status[target.presence?.status] : "Unknown"}`,
				`\n**❯ Bot:** ${target.bot}`,
			].toString())
			.addField('**Member Information**', [
				`\n**❯ Highest Role:** ${member.roles.highest.id === interaction.guild.id ? 'None' : member.roles.highest.name}`,
				`\n**❯ Server Join Date:** ${new Date(member.joinedTimestamp).toLocaleString()}`,
				`\n**❯ Roles [${member.roles.cache.size - 1}]:** ${roles}`,
			].toString())
			.setTimestamp();

		interaction.reply({ embeds: [embed] });
	},
};
